모델 클래스 부족: Member 외에 Record, Category, Budget 등의 모델 클래스가 없음. 모델은 model 패키지로 분리 필요.

서비스 인터페이스 부재: RecordService, BudgetService 등의 인터페이스가 없어 확장성과 테스트 용이성이 떨어짐.

UI 클래스의 높은 결합도: 서비스 객체를 직접 생성하고 있어 결합도가 높음 → 의존성 주입 필요.

정적 메서드 과다 사용: UI 클래스에서 정적 메서드를 많이 사용 → 객체지향 설계 위배.

정적 필드와 초기화 문제: 정적 필드와 lazy 초기화 방식은 스레드 안전성과 생명주기 관리에 문제.

일관되지 않은 싱글톤 사용: DbManager만 싱글톤이며, 다른 서비스는 정적 필드로 관리되어 일관성 없음.

의존성 주입 부재: 객체가 내부에서 직접 다른 객체를 생성함 → 생성자/Setter 주입 방식이 더 적합.

객체 초기화 시점 불명확: 객체가 필요할 때 초기화되어 예측이 어려움 → 앱 시작 시 명확히 초기화 필요.

자원 관리 문제: Scanner와 같은 자원을 여러 클래스에서 공유하여 관리 어려움.